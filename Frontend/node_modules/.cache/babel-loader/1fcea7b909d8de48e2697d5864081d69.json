{"ast":null,"code":"import _regeneratorRuntime from \"/Users/phamthixuanhien/Desktop/ptxhien_rs_courses/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/phamthixuanhien/Desktop/ptxhien_rs_courses/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Types from \"./../../constants/actionType\";\nimport { callApi, callApiLogin } from \"./../../utils/apiCaller\";\nimport { history } from \"../../../helpers/history\";\nimport { toastErrorText, toastSuccess, toastSuccessText } from \"../../../helpers/toastify\";\nimport { API_ROUTE } from \"../../constants/constant\";\nimport queryString from \"query-string\";\nimport http from \"../../utils/http\"; //#region  Login\n\nexport var actionLoginRequest = function actionLoginRequest(args) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _yield$http$post, authToken, user;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: Types.LOADING,\n                payload: {}\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return http.post(API_ROUTE.URL_LOGIN, args);\n\n            case 4:\n              _yield$http$post = _context.sent;\n              authToken = _yield$http$post.authToken;\n              user = _yield$http$post.user;\n              dispatch({\n                type: Types.LOGIN,\n                payload: {\n                  authToken: authToken,\n                  user: user\n                }\n              });\n              console.log(1);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: Types.LOGIN_FAILURE,\n                payload: {\n                  message: _context.t0.message\n                }\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var Retrieve = function Retrieve(args) {\n  return function (dispatch) {\n    var authToken = localStorage.getItem(\"authToken\"); // const learnerID = localStorage.getItem(\"learnerID\");\n    // const email = localStorage.getItem(\"email\");\n    // const fullname = localStorage.getItem(\"fullname\");\n\n    var user = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (authToken) {\n      dispatch({\n        type: Types.RETRIEVE,\n        payload: {\n          authToken: authToken,\n          user: user\n        }\n      });\n    } else {\n      dispatch({\n        type: Types.LOG_OUT\n      });\n    }\n  };\n}; //#endregion\n\nexport var Logout = function Logout(args) {\n  return function (dispatch) {\n    dispatch({\n      type: Types.LOG_OUT\n    });\n  };\n};\nexport var registerAction = function registerAction(args) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _yield$http$post2, authToken, user;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: Types.LOADING,\n                payload: {}\n              });\n              _context2.prev = 1;\n              _context2.next = 4;\n              return http.post(API_ROUTE.URL_REGISTER, args);\n\n            case 4:\n              _yield$http$post2 = _context2.sent;\n              authToken = _yield$http$post2.authToken;\n              user = _yield$http$post2.user;\n              dispatch({\n                type: Types.REGISTER,\n                payload: {\n                  authToken: authToken,\n                  user: user\n                }\n              });\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              dispatch({\n                type: Types.LOGIN_FAILURE,\n                payload: {\n                  message: _context2.t0.message\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var updateAction = function updateAction(args) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _yield$http$post3, user, message;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: Types.LOADING,\n                payload: {}\n              });\n              _context3.prev = 1;\n              _context3.next = 4;\n              return http.post(API_ROUTE.URL_AUTH_UPDATE, args);\n\n            case 4:\n              _yield$http$post3 = _context3.sent;\n              user = _yield$http$post3.user;\n              message = _yield$http$post3.message;\n              dispatch({\n                type: Types.AUTH_UPDATE,\n                payload: {\n                  user: user,\n                  message: message\n                }\n              });\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](1);\n              dispatch({\n                type: Types.LOGIN_FAILURE,\n                payload: {\n                  message: _context3.t0.message\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 10]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/phamthixuanhien/Desktop/ptxhien_rs_courses/Frontend/src/redux/actions/account/accountAction.js"],"names":["Types","callApi","callApiLogin","history","toastErrorText","toastSuccess","toastSuccessText","API_ROUTE","queryString","http","actionLoginRequest","args","dispatch","type","LOADING","payload","post","URL_LOGIN","authToken","user","LOGIN","console","log","LOGIN_FAILURE","message","Retrieve","localStorage","getItem","JSON","parse","RETRIEVE","LOG_OUT","Logout","registerAction","URL_REGISTER","REGISTER","updateAction","URL_AUTH_UPDATE","AUTH_UPDATE"],"mappings":"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","sourcesContent":["import * as Types from \"./../../constants/actionType\";\nimport { callApi, callApiLogin } from \"./../../utils/apiCaller\";\nimport { history } from \"../../../helpers/history\";\nimport {\n  toastErrorText,\n  toastSuccess,\n  toastSuccessText,\n} from \"../../../helpers/toastify\";\nimport { API_ROUTE } from \"../../constants/constant\";\nimport queryString from \"query-string\";\nimport http from \"../../utils/http\";\n//#region  Login\nexport const actionLoginRequest = args => {\n  return async (dispatch) => {\n    dispatch({\n      type: Types.LOADING,\n      payload: { },\n    });\n    try {\n      const { authToken, user } = await http.post(API_ROUTE.URL_LOGIN, args);\n      dispatch({\n        type: Types.LOGIN,\n        payload: {\n          authToken,\n          user,\n        }\n      });\n      console.log(1);\n    } catch (error) {\n      \n      dispatch({\n        type: Types.LOGIN_FAILURE,\n        payload: {\n          message: error.message,\n        },\n      });\n    }\n  };\n};\nexport const Retrieve = (args) => {\n  return (dispatch) => {\n    const authToken = localStorage.getItem(\"authToken\");\n    // const learnerID = localStorage.getItem(\"learnerID\");\n    // const email = localStorage.getItem(\"email\");\n    // const fullname = localStorage.getItem(\"fullname\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (authToken){\n      dispatch({\n        type: Types.RETRIEVE,\n        payload: {\n          authToken,\n          user,\n        }\n      });\n    } else {\n      dispatch({type: Types.LOG_OUT})\n    }\n  }\n  \n};\n//#endregion\n\n\nexport const Logout = (args) => {\n  return (dispatch) => {\n     dispatch({ type: Types.LOG_OUT });\n  };\n};\n\nexport const registerAction = (args) => {\n  return async (dispatch) => {\n    dispatch({\n      type: Types.LOADING,\n      payload: {},\n    });\n    try {\n      const { authToken, user } = await http.post(API_ROUTE.URL_REGISTER, args);\n      dispatch({\n        type: Types.REGISTER,\n        payload: {\n          authToken,\n          user\n        }\n      })\n    } catch (error) {\n      dispatch({\n        type: Types.LOGIN_FAILURE,\n        payload: {\n          message: error.message,\n        },\n      });\n    }\n  };\n};\n\nexport const updateAction = (args) => {\n  return async (dispatch) => {\n    dispatch({\n      type: Types.LOADING,\n      payload: {},\n    });\n    try {\n      const { user, message } = await http.post(API_ROUTE.URL_AUTH_UPDATE, args);\n      dispatch({\n        type: Types.AUTH_UPDATE,\n        payload: {\n          user,\n          message\n        }\n      })\n    } catch (error) {\n      dispatch({\n        type: Types.LOGIN_FAILURE,\n        payload: {\n          message: error.message,\n        },\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}